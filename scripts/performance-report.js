#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('‚ö° Generating Performance Report...\n');

const reportsDir = 'reports/performance';
if (!fs.existsSync(reportsDir)) {
  fs.mkdirSync(reportsDir, { recursive: true });
}

let report = `# ‚ö° Performance Test Results

Generated: ${new Date().toISOString()}

## üìä Load Testing Results (k6)

`;

// Process k6 results
try {
  if (fs.existsSync('load-test-results.json')) {
    const k6Results = JSON.parse(fs.readFileSync('load-test-results.json', 'utf8'));
    const metrics = k6Results.metrics;
    
    report += `### Dashboard Load Test

| Metric | Value |
|--------|-------|
| Virtual Users | ${metrics.vus?.values.value || 'N/A'} |
| HTTP Requests | ${metrics.http_reqs?.values.count || 'N/A'} |
| Response Time (avg) | ${metrics.http_req_duration?.values.avg?.toFixed(2) || 'N/A'}ms |
| Response Time (p95) | ${metrics.http_req_duration?.values['p(95)']?.toFixed(2) || 'N/A'}ms |
| Failed Requests | ${metrics.http_req_failed?.values.passes || 0}% |
| Data Received | ${metrics.data_received?.values.count ? (metrics.data_received.values.count / 1024 / 1024).toFixed(2) : 'N/A'}MB |

`;
  }
} catch (error) {
  report += `### Dashboard Load Test
Results not available: ${error.message}

`;
}

// Process API performance results
try {
  if (fs.existsSync('api-performance-results.json')) {
    const apiResults = JSON.parse(fs.readFileSync('api-performance-results.json', 'utf8'));
    const metrics = apiResults.metrics;
    
    report += `### API Performance Test

| Metric | Value |
|--------|-------|
| Virtual Users | ${metrics.vus?.values.value || 'N/A'} |
| HTTP Requests | ${metrics.http_reqs?.values.count || 'N/A'} |
| Response Time (avg) | ${metrics.http_req_duration?.values.avg?.toFixed(2) || 'N/A'}ms |
| Response Time (p95) | ${metrics.http_req_duration?.values['p(95)']?.toFixed(2) || 'N/A'}ms |
| Failed Requests | ${metrics.http_req_failed?.values.passes || 0}% |
| Throughput | ${metrics.http_reqs?.values.rate?.toFixed(2) || 'N/A'} req/s |

`;
  }
} catch (error) {
  report += `### API Performance Test
Results not available: ${error.message}

`;
}

// Process Lighthouse results
try {
  if (fs.existsSync('lighthouse-reports')) {
    const reportFiles = fs.readdirSync('lighthouse-reports').filter(f => f.endsWith('.json'));
    if (reportFiles.length > 0) {
      const lighthouseReport = JSON.parse(fs.readFileSync(path.join('lighthouse-reports', reportFiles[0]), 'utf8'));
      const categories = lighthouseReport.categories;
      const audits = lighthouseReport.audits;
      
      report += `## üîç Lighthouse Performance Audit

| Category | Score |
|----------|-------|
| Performance | ${(categories.performance.score * 100).toFixed(0)}% |
| Accessibility | ${(categories.accessibility.score * 100).toFixed(0)}% |
| Best Practices | ${(categories['best-practices'].score * 100).toFixed(0)}% |
| SEO | ${(categories.seo.score * 100).toFixed(0)}% |
| PWA | ${(categories.pwa.score * 100).toFixed(0)}% |

### Core Web Vitals

| Metric | Value | Threshold |
|--------|-------|-----------|
| First Contentful Paint | ${audits['first-contentful-paint'].displayValue} | < 2.0s |
| Largest Contentful Paint | ${audits['largest-contentful-paint'].displayValue} | < 2.5s |
| Cumulative Layout Shift | ${audits['cumulative-layout-shift'].displayValue} | < 0.1 |
| Total Blocking Time | ${audits['total-blocking-time'].displayValue} | < 300ms |

`;
    }
  }
} catch (error) {
  report += `## üîç Lighthouse Performance Audit
Results not available: ${error.message}

`;
}

report += `## üìà Recommendations

1. **Monitor Response Times**: Keep API response times under 500ms for optimal UX
2. **Optimize Bundle Size**: Consider code splitting for large bundles
3. **Cache Strategy**: Implement proper caching for static assets
4. **Database Optimization**: Monitor query performance under load
5. **CDN Usage**: Consider CDN for global performance improvement

---

Generated by Conductores PWA Performance Testing üöÄ
`;

fs.writeFileSync(path.join(reportsDir, 'performance-report.md'), report);
console.log(`‚úÖ Performance report saved to: ${path.join(reportsDir, 'performance-report.md')}`);