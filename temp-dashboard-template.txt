  template: `
    <div class="command-center-dashboard command-center-layout" [class.client-view]="currentViewMode === 'client'">
      <header class="command-center-header">
        <div class="header-brand">
          <div class="brand-icon">‚ú®</div>
          <div class="brand-content">
            <h1 class="brand-title text-gradient-primary">Centro de Comando</h1>
            <p class="brand-subtitle">Tu plan de acci√≥n para hoy, {{ userName }}</p>
          </div>
        </div>
        
        <div class="header-controls">
          <app-client-mode-toggle 
            [currentMode]="currentViewMode"
            (modeChanged)="onViewModeChanged($event)">
          </app-client-mode-toggle>
          
          <div class="user-profile">
            <span class="user-name">{{ userName }}</span>
            <button class="profile-avatar" (click)="toggleProfile()">
              <span class="avatar-icon">üë§</span>
              <span class="status-indicator"></span>
            </button>
            <div class="profile-dropdown premium-card" *ngIf="showProfileDropdown">
              <button class="dropdown-item" (click)="goToProfile()">
                <span class="dropdown-icon">üë§</span>
                Mi Perfil
              </button>
              <button class="dropdown-item" (click)="goToSettings()">
                <span class="dropdown-icon">‚öôÔ∏è</span>
                Configuraci√≥n
              </button>
              <hr class="dropdown-divider">
              <button class="dropdown-item logout" (click)="logout()">
                <span class="dropdown-icon">üö™</span>
                Cerrar Sesi√≥n
              </button>
            </div>
          </div>
        </div>
      </header>

      <main class="command-center-main">
        <!-- HERO: Next Best Action - NUEVA FUNCIONALIDAD -->
        <section class="hero-section animate-fadeInUp" *ngIf="nextBestAction && currentViewMode === 'advisor'">
          <app-next-best-action-hero 
            [actionData]="nextBestAction"
            (actionExecuted)="onActionExecuted($event)">
          </app-next-best-action-hero>
        </section>
        
        <!-- ADVISOR VIEW: Analytics Grid -->
        <section class="analytics-grid" *ngIf="currentViewMode === 'advisor'">
          <!-- KPIs Contextuales - NUEVA FUNCIONALIDAD -->
          <div class="analytics-item kpis animate-slideInRight">
            <app-contextual-kpis [kpis]="contextualKPIs"></app-contextual-kpis>
          </div>
          
          <!-- Radar de Riesgo - NUEVA FUNCIONALIDAD -->
          <div class="analytics-item radar animate-slideInRight" style="animation-delay: 0.2s">
            <app-risk-radar 
              [clients]="riskRadarClients"
              (clientSelected)="onRiskClientSelected($event)"
              (actionRequested)="onRiskActionRequested($event)">
            </app-risk-radar>
          </div>
        </section>

        <!-- HUMAN ACTIVITY FEED - NUEVA FUNCIONALIDAD -->
        <section class="activity-section animate-fadeInUp" style="animation-delay: 0.4s" *ngIf="currentViewMode === 'advisor'">
          <app-human-activity-feed [activities]="premiumActivityFeed"></app-human-activity-feed>
        </section>
        
        <!-- CLIENT VIEW: Simplified Interface - NUEVA FUNCIONALIDAD -->
        <section class="client-view-content animate-fadeInUp" *ngIf="currentViewMode === 'client'">
          <div class="client-welcome premium-card">
            <div class="client-welcome-icon">üéÜ</div>
            <h2 class="client-welcome-title">Bienvenido a tu Dashboard</h2>
            <p class="client-welcome-text">Aqu√≠ puedes ver el progreso de tus productos y servicios</p>
          </div>
          
          <div class="client-summary-grid">
            <div class="client-card premium-card active-products">
              <div class="client-card-icon">üìä</div>
              <div class="client-card-content">
                <h3>Productos Activos</h3>
                <div class="client-card-value">{{ stats?.contractsActive || 3 }}</div>
                <p>Productos en tu portafolio</p>
              </div>
            </div>
            
            <div class="client-card premium-card portfolio-value">
              <div class="client-card-icon">üí∞</div>
              <div class="client-card-content">
                <h3>Valor del Portafolio</h3>
                <div class="client-card-value">{{ formatCurrency(stats?.revenueCollection?.thisMonth || 125000) }}</div>
                <p>Valor total de tus inversiones</p>
              </div>
            </div>
            
            <div class="client-card premium-card next-payment">
              <div class="client-card-icon">üìÖ</div>
              <div class="client-card-content">
                <h3>Pr√≥ximo Pago</h3>
                <div class="client-card-value">15 d√≠as</div>
                <p>Tu siguiente aportaci√≥n</p>
              </div>
            </div>
          </div>
        </section>

        <!-- LEGACY FALLBACK: Si no hay datos premium disponibles - MANTIENE FUNCIONALIDAD ORIGINAL -->
        <section class="legacy-fallback" *ngIf="!nextBestAction && !contextualKPIs.length && currentViewMode === 'advisor'">
          
          <!-- Quick Actions - FUNCIONALIDAD ORIGINAL PRESERVADA -->
          <div class="quick-actions premium-card">
            <h2>üöÄ Acciones R√°pidas</h2>
            <div class="actions-grid">
              <button 
                class="action-card btn-primary"
                (click)="createNewOpportunity()"
              >
                <div class="action-icon">‚ûï</div>
                <div class="action-text">
                  <h3>Nueva Oportunidad</h3>
                  <p>Crear cotizaci√≥n o simulaci√≥n</p>
                </div>
              </button>
              
              <button 
                class="action-card btn-primary"
                routerLink="/clientes"
              >
                <div class="action-icon">üë•</div>
                <div class="action-text">
                  <h3>Ver Clientes</h3>
                  <p>Gestionar expedientes</p>
                </div>
              </button>
              
              <button 
                class="action-card btn-primary"
                routerLink="/simulador"
              >
                <div class="action-icon">üéØ</div>
                <div class="action-text">
                  <h3>Simulador</h3>
                  <p>Modelar escenarios</p>
                </div>
              </button>
            </div>
          </div>

          <!-- Market Filter - FUNCIONALIDAD ORIGINAL PRESERVADA -->
          <div class="market-filter premium-card" *ngIf="!isLoading">
            <h2>üåê Mercado</h2>
            <div class="filter-buttons">
              <button 
                class="filter-btn"
                [class.active]="selectedMarket === 'all'"
                (click)="onMarketFilter('all')"
              >
                Todos
              </button>
              <button 
                class="filter-btn"
                [class.active]="selectedMarket === 'aguascalientes'"
                (click)="onMarketFilter('aguascalientes')"
              >
                AGS
              </button>
              <button 
                class="filter-btn"
                [class.active]="selectedMarket === 'edomex'"
                (click)="onMarketFilter('edomex')"
              >
                EdoMex
              </button>
            </div>
          </div>

          <!-- Conversion Funnel - FUNCIONALIDAD ORIGINAL PRESERVADA -->
          <div class="conversion-funnel premium-card" *ngIf="!isLoading && funnelData.length > 0">
            <div class="funnel-header">
              <div class="funnel-title-section">
                <h2 class="text-gradient-primary">üìä Funnel de Conversi√≥n</h2>
                <p>Pipeline de oportunidades con tasas de conversi√≥n en tiempo real</p>
              </div>
              <div class="funnel-stats">
                <div class="stat-item">
                  <span class="stat-label">Total en Funnel:</span>
                  <span class="stat-value">{{ getTotalClientsInFunnel() }}</span>
                </div>
              </div>
            </div>

            <div class="funnel-visualization">
              <div class="funnel-bars">
                <div 
                  *ngFor="let stage of funnelData; let i = index" 
                  class="funnel-bar-container animate-fadeIn"
                  [style.animation-delay.ms]="i * 100"
                >
                  <div class="funnel-stage">
                    <!-- Stage Info -->
                    <div class="stage-info">
                      <p class="stage-name">{{ stage.name }}</p>
                      <p class="stage-count">{{ stage.count }} clientes</p>
                    </div>
                    
                    <!-- Progress Bar -->
                    <div class="funnel-bar">
                      <div class="funnel-bar-bg">
                        <div 
                          class="funnel-fill"
                          [class]="getFunnelBarClass(i)"
                          [style.width.%]="getStagePercentage(stage)"
                        >
                          <span class="percentage-label" *ngIf="stage.count > 0">
                            {{ getStagePercentage(stage).toFixed(1) }}%
                          </span>
                        </div>
                      </div>
                    </div>
                    
                    <!-- Conversion Rate -->
                    <div class="conversion-rate" *ngIf="i > 0 && stage.count > 0">
                      <p class="conversion-info" [class]="getConversionRateClass(getConversionRate(i))">
                        {{ getConversionRate(i).toFixed(1) }}%
                        <span class="conversion-label">conv.</span>
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="funnel-summary">
                <p>Conversi√≥n general del funnel: <span class="text-gradient-primary">{{ getOverallConversionRate().toFixed(1) }}%</span></p>
              </div>
            </div>
          </div>

          <!-- Actionable Alerts - FUNCIONALIDAD ORIGINAL PRESERVADA -->
          <div class="actionable-alerts premium-card" *ngIf="!isLoading && actionableGroups.length > 0">
            <div class="alerts-header">
              <div class="alert-title-section">
                <div class="alert-icon">üö®</div>
                <div>
                  <h3>Alertas y Acciones Prioritarias</h3>
                  <p>Clientes que requieren atenci√≥n inmediata</p>
                </div>
              </div>
            </div>
            
            <div class="alerts-grid">
              <div *ngFor="let group of actionableGroups" class="alert-group">
                <div class="group-header">
                  <h4 class="text-primary-cyan">{{ group.title }} ({{ group.clients.length }})</h4>
                  <p class="group-description">{{ group.description }}</p>
                </div>
                
                <div class="clients-list">
                  <div 
                    *ngFor="let client of group.clients" 
                    class="client-card"
                    [class]="getClientCardBorderClass(group.priority)"
                    (click)="selectClient(client)"
                  >
                    <div class="client-avatar-section">
                      <div class="client-avatar">
                        <img [src]="client.avatarUrl" [alt]="client.name" *ngIf="client.avatarUrl">
                        <span *ngIf="!client.avatarUrl">{{ client.name.charAt(0) }}</span>
                      </div>
                    </div>
                    
                    <div class="client-info">
                      <div class="client-name">{{ client.name }}</div>
                      <div class="client-status">{{ client.status }}</div>
                      <div class="client-timing">{{ client.daysInStage }} d√≠as en etapa</div>
                    </div>
                    
                    <div class="priority-badge" [class]="getPriorityBadgeClass(group.priority)">
                      {{ group.priority === 'high' ? 'URGENTE' : group.priority === 'medium' ? 'MEDIO' : 'BAJO' }}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

        </section>
      </main>
    </div>
  `,