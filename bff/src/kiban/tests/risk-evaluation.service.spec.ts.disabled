/**
 * 🧪 KIBAN/HASE Risk Evaluation Service - Unit Tests
 * Comprehensive test coverage for enterprise risk evaluation engine
 */

import { Test, TestingModule } from '@nestjs/testing';
import { HttpService } from '@nestjs/axios';
import { Logger } from '@nestjs/common';
import { of, throwError } from 'rxjs';
import { RiskEvaluationService } from '../services/risk-evaluation.service';
import { 
  RiskEvaluationRequestDto, 
  RiskCategory, 
  EvaluationType 
} from '../dto/risk-evaluation-request.dto';
import { 
  RiskDecision, 
  RiskFactorSeverity 
} from '../dto/risk-evaluation-response.dto';


  const mockRequest = {
    evaluationId: 'EVAL-001',
    tipoEvaluacion: 'INDIVIDUAL' as any,
    clienteId: 'CLI-001',
    asesorId: 'ASE-001',
    datosPersonales: {
      edad: 35,
      genero: 'M',
      ocupacion: 'Transportista',
      ingresosMensuales: 25000,
      estadoCivil: 'casado'
    },
    perfilFinanciero: {
      scoreCrediticio: 720,
      historialPagos: 85,
      deudaActual: 150000,
      capacidadPago: 8000,
      antiguedadCrediticia: 5,
      ingresosMensuales: 25000
    },
    datosVehiculo: {
      marca: 'Nissan',
      modelo: 'NV200',
      año: 2022,
      year: 2022,
      precio: 380000,
      valor: 380000,
      enganche: 76000,
      plazoMeses: 48
    },
    factoresRiesgo: {
      factoresDetectados: [],
      estabilidadLaboral: 8,
      nivelEndeudamiento: 35,
      riesgoGeografico: 6
    }
  };
  
describe('🎯 RiskEvaluationService', () => {
  let service: RiskEvaluationService;
  let httpService: HttpService;
  let logger: Logger;

  const mockHttpService = {
    get: jest.fn(),
    post: jest.fn()
  };

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        RiskEvaluationService,
        {
          provide: HttpService,
          useValue: mockHttpService
        }
      ],
    }).compile();

    service = module.get<RiskEvaluationService>(RiskEvaluationService);
    httpService = module.get<HttpService>(HttpService);
    logger = new Logger(RiskEvaluationService.name);

    // Reset mocks
    jest.clearAllMocks();
  });

  describe('🔍 Risk Evaluation - Core Functionality', () => {
    const mockRequest: RiskEvaluationRequestDto = {
      evaluationId: 'EVAL-2025-001',
      tipoEvaluacion: EvaluationType.INDIVIDUAL,
      clienteId: 'CLI-001',
      asesorId: 'ASE-001',
      datosPersonales: {
        edad: 35,
        genero: 'M',
        ocupacion: 'Conductor',
        ingresosMensuales: 25000,
        estadoCivil: 'casado'
      },
      perfilFinanciero: {
        scoreCrediticio: 750,
        historialPagos: 85,
        deudaActual: 50000,
        capacidadPago: 8000,
        antiguedadCrediticia: 5
      },
      datosVehiculo: {
        marca: 'Nissan',
        modelo: 'Versa',
        año: 2020,
        precio: 250000,
        enganche: 50000,
        plazoMeses: 60
      },
      factoresRiesgo: {
        factoresDetectados: [],
        estabilidadLaboral: 8,
        nivelEndeudamiento: 40,
        riesgoGeografico: 3
      }
    };

    it('✅ should evaluate risk successfully - HIGH SCORE (APROBADO)', async () => {
      const result = await service.evaluateRisk(mockRequest);

      expect(result).toBeDefined();
      expect(result.evaluationId).toBe('EVAL-2025-001');
      expect(result.decision).toBe(RiskDecision.APROBADO);
      expect(result.riskCategory).toBe(RiskCategory.BAJO);
      expect(result.scoreBreakdown.finalScore).toBeGreaterThan(75);
      expect(result.confidenceLevel).toBeGreaterThan(85);
      expect(result.processingTimeMs).toBeLessThan(5000);
    });

    it('⚠️ should handle MEDIUM risk - APROBADO_CONDICIONAL', async () => {
      const mediumRiskRequest = {
        ...mockRequest,
        perfilFinanciero: {
          ...mockRequest.perfilFinanciero,
          scoreCrediticio: 650, // Lower score
          historialPagos: 70,   // Lower payment history
          deudaActual: 80000    // Higher debt
        }
      };

      const result = await service.evaluateRisk(mediumRiskRequest);

      expect(result.decision).toBe(RiskDecision.APROBADO_CONDICIONAL);
      expect(result.riskCategory).toBe(RiskCategory.MEDIO);
      expect(result.riskFactors.length).toBeGreaterThan(0);
      expect(result.mitigationPlan.required).toBe(true);
      expect(result.financialRecommendations.specialConditions?.length).toBeGreaterThan(0);
    });

    it('🚫 should reject HIGH risk - RECHAZADO', async () => {
      const highRiskRequest = {
        ...mockRequest,
        perfilFinanciero: {
          ...mockRequest.perfilFinanciero,
          scoreCrediticio: 450, // Very low score
          historialPagos: 30,   // Poor payment history
          deudaActual: 150000   // Very high debt
        }
      };

      const result = await service.evaluateRisk(highRiskRequest);

      expect(result.decision).toBe(RiskDecision.RECHAZADO);
      expect(result.riskCategory).toBe(RiskCategory.CRITICO);
      expect(result.riskFactors.some(f => f.severity === RiskFactorSeverity.CRITICA)).toBe(true);
    });

    it('📊 should calculate score breakdown correctly', async () => {
      const result = await service.evaluateRisk(mockRequest);

      expect(result.scoreBreakdown).toBeDefined();
      expect(result.scoreBreakdown.creditScore).toBeGreaterThanOrEqual(0);
      expect(result.scoreBreakdown.creditScore).toBeLessThanOrEqual(100);
      expect(result.scoreBreakdown.financialStability).toBeGreaterThanOrEqual(0);
      expect(result.scoreBreakdown.paymentCapacity).toBeGreaterThanOrEqual(0);
      expect(result.scoreBreakdown.finalScore).toBeGreaterThanOrEqual(0);
      expect(result.scoreBreakdown.finalScore).toBeLessThanOrEqual(100);
    });

    it('🔍 should identify risk factors correctly', async () => {
      const riskRequest = {
        ...mockRequest,
        perfilFinanciero: {
          ...mockRequest.perfilFinanciero,
          scoreCrediticio: 520, // Low score should trigger risk factor
          deudaActual: 120000   // High debt should trigger risk factor
        },
        datosVehiculo: {
          ...mockRequest.datosVehiculo,
          año: 2010 // Old vehicle should trigger risk factor
        }
      };

      const result = await service.evaluateRisk(riskRequest);

      expect(result.riskFactors.length).toBeGreaterThan(0);
      
      // Should identify low credit score
      expect(result.riskFactors.some(f => f.factorId === 'low_credit_score')).toBe(true);
      
      // Should identify high debt ratio
      expect(result.riskFactors.some(f => f.factorId === 'high_debt_ratio')).toBe(true);
      
      // Should identify old vehicle
      expect(result.riskFactors.some(f => f.factorId === 'old_vehicle')).toBe(true);
    });
  });

  describe('💰 Financial Recommendations', () => {
    it('should generate appropriate recommendations for LOW risk', async () => {
      const result = await service.evaluateRisk(mockRequest);

      expect(result.financialRecommendations).toBeDefined();
      expect(result.financialRecommendations.maxLoanAmount).toBeGreaterThan(0);
      expect(result.financialRecommendations.suggestedInterestRate).toBeLessThan(15); // Low risk = lower rate
      expect(result.financialRecommendations.maxTermMonths).toBeGreaterThan(60);
    });

    it('should apply stricter terms for HIGH risk', async () => {
      const highRiskRequest = {
        ...mockRequest,
        perfilFinanciero: {
          ...mockRequest.perfilFinanciero,
          scoreCrediticio: 500
        }
      };

      const result = await service.evaluateRisk(highRiskRequest);

      expect(result.financialRecommendations.suggestedInterestRate).toBeGreaterThan(18); // Higher rate
      expect(result.financialRecommendations.maxTermMonths).toBeLessThan(72); // Shorter term
      expect(result.financialRecommendations.specialConditions?.length).toBeGreaterThan(0);
    });
  });

  describe('🔄 Batch Processing', () => {
    it('should process multiple evaluations successfully', async () => {
      const batchRequest = {
        batchId: 'BATCH-2025-001',
        prioridad: 3,
        evaluaciones: [
          { ...mockRequest, evaluationId: 'EVAL-001' },
          { ...mockRequest, evaluationId: 'EVAL-002' },
          { ...mockRequest, evaluationId: 'EVAL-003' }
        ]
      };

      const result = await service.evaluateBatchRisk(batchRequest);

      expect(result.batchId).toBe('BATCH-2025-001');
      expect(result.totalProcessed).toBe(3);
      expect(result.totalSuccessful).toBe(3);
      expect(result.totalFailed).toBe(0);
      expect(result.results.length).toBe(3);
      expect(result.batchStats.approvalRate).toBeGreaterThan(0);
    });

    it('should handle mixed success/failure in batch', async () => {
      // Mock one evaluation to fail
      const failingRequest = {
        ...mockRequest,
        evaluationId: 'EVAL-FAIL',
        datosPersonales: {
          ...mockRequest.datosPersonales,
          edad: 15 // Invalid age should cause validation error
        }
      };

      const batchRequest = {
        batchId: 'BATCH-2025-002',
        prioridad: 3,
        evaluaciones: [
          { ...mockRequest, evaluationId: 'EVAL-SUCCESS' },
          failingRequest
        ]
      };

      const result = await service.evaluateBatchRisk(batchRequest);

      expect(result.totalProcessed).toBe(2);
      expect(result.totalSuccessful).toBe(1);
      expect(result.totalFailed).toBe(1);
      expect(result.processingErrors).toBeDefined();
    });
  });

  describe('🛡️ Compliance & Validation', () => {
    it('should validate compliance correctly', async () => {
      const result = await service.evaluateRisk(mockRequest);

      expect(result.complianceValidation).toBeDefined();
      expect(result.complianceValidation.kycValidationsComplete).toBe(true);
      expect(result.complianceValidation.internalPoliciesCompliant).toBe(true);
      expect(result.complianceValidation.regulatoryCompliant).toBe(true);
    });

    it('should identify missing documentation', async () => {
      const incompleteRequest = {
        ...mockRequest,
        perfilFinanciero: {
          ...mockRequest.perfilFinanciero,
          scoreCrediticio: 350 // Very low score should require additional docs
        },
        factoresRiesgo: {
          ...mockRequest.factoresRiesgo,
          estabilidadLaboral: 3 // Low job stability
        }
      };

      const result = await service.evaluateRisk(incompleteRequest);

      expect(result.complianceValidation.missingDocumentation?.length).toBeGreaterThan(0);
      expect(result.nextSteps.some(step => step.includes('documentación'))).toBe(true);
    });
  });

  describe('⚡ Performance & Reliability', () => {
    it('should complete evaluation within time limits', async () => {
      const startTime = Date.now();
      const result = await service.evaluateRisk(mockRequest);
      const endTime = Date.now();

      expect(endTime - startTime).toBeLessThan(5000); // Should complete in under 5 seconds
      expect(result.processingTimeMs).toBeLessThan(5000);
      expect(result.processingTimeMs).toBeGreaterThan(0);
    });

    it('should handle edge cases gracefully', async () => {
      const edgeCaseRequest = {
        ...mockRequest,
        perfilFinanciero: {
          ...mockRequest.perfilFinanciero,
          scoreCrediticio: 850, // Maximum possible score
          deudaActual: 0,       // No debt
          capacidadPago: 50000  // Very high capacity
        },
        datosVehiculo: {
          ...mockRequest.datosVehiculo,
          año: 2024,  // Brand new vehicle
          precio: 80000, // Low price
          enganche: 50000 // High down payment
        }
      };

      const result = await service.evaluateRisk(edgeCaseRequest);

      expect(result).toBeDefined();
      expect(result.decision).toBe(RiskDecision.APROBADO);
      expect(result.riskCategory).toBe(RiskCategory.BAJO);
    });
  });

  describe('🎯 Decision Logic', () => {
    it('should make correct decision for different risk levels', async () => {
      // Test different score ranges
      const testCases = [
        { score: 850, expectedCategory: RiskCategory.BAJO, expectedDecision: RiskDecision.APROBADO },
        { score: 700, expectedCategory: RiskCategory.MEDIO, expectedDecision: RiskDecision.APROBADO },
        { score: 550, expectedCategory: RiskCategory.ALTO, expectedDecision: RiskDecision.APROBADO_CONDICIONAL },
        { score: 350, expectedCategory: RiskCategory.CRITICO, expectedDecision: RiskDecision.RECHAZADO }
      ];

      for (const testCase of testCases) {
        const testRequest = {
          ...mockRequest,
          evaluationId: `EVAL-${testCase.score}`,
          perfilFinanciero: {
            ...mockRequest.perfilFinanciero,
            scoreCrediticio: testCase.score
          }
        };

        const result = await service.evaluateRisk(testRequest);
        
        expect(result.riskCategory).toBe(testCase.expectedCategory);
        // Decision might vary based on other factors, so we test the category more strictly
      }
    });

    it('should generate appropriate next steps for each decision', async () => {
      const result = await service.evaluateRisk(mockRequest);

      expect(result.nextSteps).toBeDefined();
      expect(result.nextSteps.length).toBeGreaterThan(0);
      expect(result.decisionReasons).toBeDefined();
      expect(result.decisionReasons.length).toBeGreaterThan(0);
    });
  });

  describe('📈 Metrics & Analytics', () => {
    it('should provide confidence level calculation', async () => {
      const result = await service.evaluateRisk(mockRequest);

      expect(result.confidenceLevel).toBeGreaterThanOrEqual(0);
      expect(result.confidenceLevel).toBeLessThanOrEqual(100);
      expect(typeof result.confidenceLevel).toBe('number');
    });

    it('should include algorithm metadata', async () => {
      const result = await service.evaluateRisk(mockRequest);

      expect(result.algorithmVersion).toBeDefined();
      expect(result.metadata).toBeDefined();
      expect(result.metadata?.modelVersion).toBeDefined();
      expect(result.metadata?.modelAccuracy).toBeGreaterThan(0);
    });
  });
});

// 🧪 Integration Test Helpers
export class RiskEvaluationTestHelper {
  static createMockRequest(overrides: Partial<RiskEvaluationRequestDto> = {}): RiskEvaluationRequestDto {
    return {
      evaluationId: 'TEST-EVAL-001',
      tipoEvaluacion: EvaluationType.INDIVIDUAL,
      clienteId: 'TEST-CLI-001',
      asesorId: 'TEST-ASE-001',
      datosPersonales: {
        edad: 30,
        genero: 'M',
        ocupacion: 'Conductor',
        ingresosMensuales: 20000,
        estadoCivil: 'soltero'
      },
      perfilFinanciero: {
        scoreCrediticio: 680,
        historialPagos: 80,
        deudaActual: 40000,
        capacidadPago: 6000,
        antiguedadCrediticia: 3
      },
      datosVehiculo: {
        marca: 'Nissan',
        modelo: 'Versa',
        año: 2021,
        precio: 200000,
        enganche: 40000,
        plazoMeses: 48
      },
      factoresRiesgo: {
        factoresDetectados: [],
        estabilidadLaboral: 7,
        nivelEndeudamiento: 35,
        riesgoGeografico: 4
      },
      ...overrides
    };
  }

  static createHighRiskScenario(): RiskEvaluationRequestDto {
    return this.createMockRequest({
      perfilFinanciero: {
        scoreCrediticio: 450,
        historialPagos: 40,
        deudaActual: 120000,
        capacidadPago: 3000,
        antiguedadCrediticia: 1
      },
      factoresRiesgo: {
        factoresDetectados: ['MORA_RECURRENTE'],
        estabilidadLaboral: 3,
        nivelEndeudamiento: 80,
        riesgoGeografico: 8
      }
    });
  }

  static createLowRiskScenario(): RiskEvaluationRequestDto {
    return this.createMockRequest({
      perfilFinanciero: {
        scoreCrediticio: 820,
        historialPagos: 95,
        deudaActual: 10000,
        capacidadPago: 12000,
        antiguedadCrediticia: 8
      },
      factoresRiesgo: {
        factoresDetectados: [],
        estabilidadLaboral: 9,
        nivelEndeudamiento: 15,
        riesgoGeografico: 2
      }
    });
  }
}