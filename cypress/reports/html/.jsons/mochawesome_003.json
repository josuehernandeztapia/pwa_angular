{
  "stats": {
    "suites": 1,
    "tests": 0,
    "passes": 0,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-26T04:27:46.821Z",
    "end": "2025-09-26T04:28:00.206Z",
    "duration": 13385,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 2,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5341b00a-db04-4dcd-a2d4-a1e73140c120",
      "title": "",
      "fullFile": "cypress/e2e/00-smoke-navigation.cy.ts",
      "file": "cypress/e2e/00-smoke-navigation.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9e2e8bf4-f228-4172-af11-fcbaf7320423",
          "title": "Smoke Navigation (visual + functional)",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "navigates core routes and interacts with primary CTAs",
              "fullTitle": "Smoke Navigation (visual + functional) navigates core routes and interacts with primary CTAs",
              "timedOut": null,
              "duration": 1301,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-videos-failed\",\n  \"value\": \"cypress/e2e/00-smoke-navigation.cy.ts\"\n}",
              "code": "// Track console errors per route\nconst errors = [];\ncy.on('window:before:load', (win) => {\n    const origError = win.console.error;\n    win.console.error = (...args) => {\n        try {\n            errors.push({ route: win.location.pathname, message: String(args[0]) });\n        }\n        catch { }\n        origError.call(win.console, ...args);\n    };\n});\nroutes.forEach(({ path, label }) => {\n    cy.log(`Visiting ${label} (${path})`);\n    cy.visit(path);\n    cy.waitForAngular();\n    cy.wait(200); // allow lazy components to attach\n    // Page renders\n    cy.get('body').should('be.visible');\n    // Container exists\n    cy.get('main, [role=\"main\"], .premium-container').should('exist');\n    // Try safe interactions: click non-destructive CTAs if present\n    // Prefer data-cy primary actions\n    const safeButtonSelector = [\n        '[data-cy^=\"action-\"]',\n        '[data-cy*=\"btn\"]',\n        'button[type=\"button\"]',\n        'a.button, button.button',\n    ].join(',');\n    // Avoid destructive actions by text\n    const destructive = /(eliminar|borrar|remover|delete|remove)/i;\n    cy.get('body').then($body => {\n        const $btns = $body.find(safeButtonSelector).filter((_, el) => {\n            const txt = (el.textContent || '').trim();\n            return txt.length > 0 && !destructive.test(txt);\n        });\n        if ($btns.length > 0) {\n            cy.wrap($btns[0]).click({ force: true });\n            // UI remains responsive\n            cy.get('body').should('be.visible');\n        }\n    });\n    // Scroll to bottom and back as a basic UX check\n    cy.scrollTo('bottom', { ensureScrollable: false });\n    cy.wait(50);\n    cy.scrollTo('top', { ensureScrollable: false });\n});\n// Ensure no console errors were recorded during navigation\ncy.then(() => {\n    const critical = errors.filter(e => !/ResizeObserver|deprecated/i.test(e.message));\n    expect(critical, `Console errors: ${JSON.stringify(critical, null, 2)}`).to.have.length(0);\n});",
              "err": {
                "message": "CypressError: `cy.task('coverageReport')` failed with the following error:\n\n> Command failed with exit code 1: npm run coverage:report\n\nhttps://on.cypress.io/api/task\n\nBecause this error occurred during a `after all` hook we are skipping all of the remaining tests.\n\nAlthough you have test retries enabled, we do not retry tests when `before all` or `after all` hooks fail",
                "estack": "CypressError: `cy.task('coverageReport')` failed with the following error:\n\n> Command failed with exit code 1: npm run coverage:report\n\nhttps://on.cypress.io/api/task\n\nBecause this error occurred during a `after all` hook we are skipping all of the remaining tests.\n\nAlthough you have test retries enabled, we do not retry tests when `before all` or `after all` hooks fail\n    at <unknown> (http://localhost:4200/__cypress/runner/cypress_runner.js:138627:70)\n    at tryCatcher (http://localhost:4200/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://localhost:4200/__cypress/runner/cypress_runner.js:1489:31)\n    at Promise._settlePromise (http://localhost:4200/__cypress/runner/cypress_runner.js:1546:18)\n    at Promise._settlePromise0 (http://localhost:4200/__cypress/runner/cypress_runner.js:1591:10)\n    at Promise._settlePromises (http://localhost:4200/__cypress/runner/cypress_runner.js:1667:18)\n    at _drainQueueStep (http://localhost:4200/__cypress/runner/cypress_runner.js:2377:12)\n    at _drainQueue (http://localhost:4200/__cypress/runner/cypress_runner.js:2370:9)\n    at Async._drainQueues (http://localhost:4200/__cypress/runner/cypress_runner.js:2386:5)\n    at Async.drainQueues (http://localhost:4200/__cypress/runner/cypress_runner.js:2256:14)\nFrom Your Spec Code:\n    at Object.proxyGetter [as get] (http://localhost:4200/__cypress/runner/cypress_runner.js:80426:22)\n    at exists (http://localhost:4200/__cypress/runner/cypress_runner.js:146470:26)\n    at elExists (http://localhost:4200/__cypress/runner/cypress_runner.js:146485:10)\n    at ensureExistence (http://localhost:4200/__cypress/runner/cypress_runner.js:146666:22)\n    at onFailFn (http://localhost:4200/__cypress/runner/cypress_runner.js:146695:53)\n\nFrom Node.js Internals:\n  Error: Command failed with exit code 1: npm run coverage:report\n      at makeError (/workspace/node_modules/@cypress/code-coverage/node_modules/execa/lib/error.js:59:11)\n      at handlePromise (/workspace/node_modules/@cypress/code-coverage/node_modules/execa/index.js:114:26)\n      at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                "diff": null
              },
              "uuid": "f0b7cea1-4aa2-41e5-964c-ee17bc635ae4",
              "parentUUID": "9e2e8bf4-f228-4172-af11-fcbaf7320423",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f0b7cea1-4aa2-41e5-964c-ee17bc635ae4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1301,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "charts": true,
        "reportPageTitle": "Conductores PWA E2E Tests",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "saveAllAttempts": false,
        "reportDir": "cypress/reports/html/.jsons",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}